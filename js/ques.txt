Q.1 Difference between “ == “ and “ === “ operators.
Ans: These are the comparison operators. They always return boolean values like true or false.
== it compares only the value.
=== it compares both the value as well as type of data.
If you want to find the data type of value we use typeof operator.
let a = 5
let b = "5"
a == b will give true
a === b will give false

Q.2 What is the spread operator?
Ans: Spread Operator in javascript take in the iterable and expands it into individual values.(destructuring).
It's syntax is ...
It can be used to clone, expand and concat arrays and objects.
let arr = [1, 2, 4]
let arr2 = [...arr, 5, 6]

Q.3 What are the differences between var, let and const?
Ans: These are three different ways of creating or declaring the variables in JS.
Out of thses threee var used to be a part of ES5 or EcmaScript2014 and let and const are part of latest release of JS version i.e. ES6.
var is a global scope variableslet and const are local scope variable.
At the time of memory allocation they will get  their memory  also at different location means var will be in global and let and const will be in script scope according to browser resulting  n that if you will try to access var keyword vairbale before intialization you will get undefined.
But if you will try to access variable created with let or const it will give Reference error: Variable is not defined.

Q.4 What is execution context
Ans: It is an concept in javascript that holds information about the environment where the current js code is being exceuted.
1) Memory allocation Phase => In this phase variables and function definitions gets allocated in the memory. Also variables declared with var keyword gets intialized with undefined.
2) Code Execution Phase => Here, variables gets the value assigned to them and for every function call a new execution context i.e. FEC is created with same 2 phases.
In js we can have 2 types of execution context:
1) Global (GEC) => When the js file first loads on the browser this context is created and pushed into the call stack. Code which is not in any function or object is excuted inside.
2) Functional (FEC) =>  When Js Engine finds a function call it creates a new execution context refering that function which is also pushed in call stack. FEC can have access to all code of GEC but not vice versa.
Every Execution Context has two phases:

Q.5 What is meant by first class functions?
Ans: When functions are treated like any other variable in js they are called as first class functions.
This function can be passed as an argument to other function also they can be returned by other functions.
const greeting = function () {
    console.log("Hello World");
}
greeting();

Q.6 What are closures?
Ans: Closure is a combination bundled together with reference to its lexical environment.
Closure gives you access to an outer function's scope from the inner function.
Closures are created everytime a function is created at fucntion creation time.

function outer() {
    var num = 5;
    fucntion inner() {
        console.log(num)
    }
    return inner;
}
outer()();

Q.7 Explain call(), apply() and, bind() methods.
Ans: These are the methods in js serving the same purpose with some differences. The purpose they serve is take in object and sets the this keyword in a function to the specified object.
this refers to the object from where the function is invoked from.
bind() => it creates and returns a new function
call() and apply() => it set this keyword and immediately executes the function doesnt return anything.
only difference between call() and apply() is call accepts comma seperated arguments and apply accepts array of arguments
const john = {
    name: 'John',
    age: 22
}
const jane = {
    name: 'Jane',
    age: 26
}
function greeting () {
    consoel.log(`Hi my name is ${this.name} and I am ${this.age} years old.`)
}
greeting.call(john) // Hi my name is John and I am 22 years old.
let newFunc = greeting.bind(jane)
newFunc(); // Hi my name is Jane and I am 26 years old.

Q.8 Explain prototypes.
Ans: Prototypes are objects in javascript from which other objects can inherit properties.
__proto__ can be be used to define a prototype object.
These inherited properties are hidden by default but can be accessed by the object which inherits the prototype.
let animal = {
    eats: true,
    moves: true
}
let rabbit = {
    jumps: true,
    __proto__: animal
}
rabiit inherits from animal.

Q.9 What are promises and why do we need them?
Ans: Promise is an object in javascript that represents eventual completion or failure of an asynchronous operation and its resulting value.
Promise can be created using Promise constructor. which takes in a callback function and which has 2 parameters resolve and reject.
let promise1 = new Promise((resolve, reject) => {
    const x = 5;
    const y = 5;
    if (x === y ) {
        resolve("Both are equal")
    } else {
        reject("Not equal")
    }
    resolve('Promise has been fulfilled')
    reject('Promise has been rejected')
})
Promise can be in one of the 3 state at an instance of time:
1) pending: initial state, promise neither been resolved nor rejected
2) fulfilled: it means operation has been completed successfully (resolved)
3) rejected: it means operation has been failed to complete.
There are also promise consumers:
then() =>  it is invoked when promise gets fulfilled. It takes in a callback function and the parameter of the callback function will be equal to the resolve value.
.catch() => it is invoked when promise gets rejected. It takes in a callback function and the parameter of the callback function will be equal to the reject value.
promise1
    .then(result =>  console.log(result))
    .catch(result =>  console.log(result))

Q.10 What is the purpose of async/await keywords?
Ans: async and await are predefined keywords in javascript.
They make promises easier to write.
async => it is used before fucntion and it makes the function return a promise.
await => it is used inside the function and it makes the function wait for the promise.

let promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("second");
        resolve();
    }, 1000)
})

async function print() {
    console.log('first')
    await promise;
    console.log('third')
}
print();

Q.11 What are function constructors?
Ans: They are just like regular functions used to create objects.
They are called with new keyowrd.
Good practice to capitalize first letter of the constructor function.
When the function is executed with new keyword 2 things happen:
1) it creates an empty object and assigns that empty object to this keyword.
2) Returns this( which is object created by the function)
fucntion Person(name, age) {
    this.fname = name,
    this.myAge = age
}
const person1 = new Person("John", "22")

Q.12 What is hoisting?
Ans: hoisting refers to process where the interpreter APPEARS to move the declarations of functions and varaibales to top of their scope, prior to execution of the code.
only normal functions are hoisted not arrow or first class or anonymous functions.
only variable with var is hoisted not let and const.
console.log(test) // undefined
var test

Q.13 What is the DOM?
Ans: Document Object Model (DOM) is a programming interface for HTML Documents.
It is a way to represent the webpage in a structured hierarchial way so that it will become easier for programmers an users to glide through the document.
With DOM, we can easily access and manipulate tags, IDs, classes, attributes, or elements using methods like getElementById etc.
When the Html file loads in the brower javascript cannot understand it directly, so we require DOM which is representtion of same html documnet but in different format with using objects.

Q.14 Difference between undefined vs not defined vs NaN
Ans: undefined => When we declare a variable and do not assign any value to it, it by default gets the value assigned known as undefined in javascript.
typeof (undefined) gives us undefined.
not defined => When we try to access  vairable which is not declred then we encounter Reference Error saying variable is not defined.
NaN => It is known as Not a Number. It denotes that value of object is not a number.
e.g. sqrt(-1)
and any arthimetic operation wih undefined will result in NaN

Q.15 How many operators do we have in JS ?
Ans: Arthimetic => +, -, *, %, ++, -- to perform mathematical operations
Comparison => ==, ===, !=, !==, >, <, <=, >=
Logical => &&(and), || (or), !(not)
Bitwise => & (and), | (or), ~(not), ^(xor), <<(left shift), >>(right shift)
Ternary => variableName = (condition) ? value1 : value2

Q.16 What are pure functions?
Ans: It is a function that always returns the same output for the same arguments passed in it.
That means function's return statement does not depend on the values outside the function.
function add(a, b) {
    return a + b;
}

Q.17 What is an event loop and call stack?
Ans: Call Stack => It is where the execution context in javascript are maintained and are being tracked so that we know which current context of code is running. Js has only one call stack at a time because it is single threaded language.
It follows Last In First Out principle (LIFO)
Event Loop => Whenever a asynchronous operation or function is being executed it doesnt directly go into the callstack there is queue caalled as callbakc queue which is where it goes. this queue follows principle of FIFO(first in first out). And event loop frequently checks whether the call stack is empty or not, Whenever it founds it is empty is pushes the first call of callback queue to call stack.

Q.18 What is prototype chain?
Ans: Prototypes are objects from which other objects can inherit properties.
The Prototype of an object could also have prototype object and this continues until we reach the level where no prototype object is found. This is called prototype chaining.
e.g.// pocket -> bed -> table -> head
        let head = {
            glasses: 1
        }
        let table = {
            pen: 3,
            __proto__: head
        }
        let bed = {
            sheet: 1,
            pillow: 2,
            __proto__: table
        }
        let pocket = {
            money: 2000,
            __proto__: bed
        }

Q.19 What is the use of setTimeout?
Ans: It is an asynchronous function, it will not pause execution of other functions in call stack (As in js code is exceuted line by line and next line to execute previous one should be finished).
It take a callback function to execute and time in ms as arguments and it exceutes that callback function after specified time.
It can be used in alarms or reminders, delay some kind of executions.
console.log("i am first")
setTimeout(() => {
    "I am Last"
}, 3000);
console.log("I am Second");