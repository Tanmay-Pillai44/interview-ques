Q. 1 What is Js?
=> Js is dynamic programming language which earlier was used only for frontend but after node we have been using it in backend applications too
Js is synchronous i.e. it exceutes the code line by line.
Also it is single threaded that means only one operation is done at a time and when error is faced it stops the execution of code at that line.
We can use js to update and manipulate the web content (in HTML and css).
Js is dynamic because variable need not to be defined its type like integer, string, array or object.


Q.2 What is JS Engine?
=> SO when browser loads our js file javascript is not understandable by our computer and only by browser so JS Engine
    executes the js code and converts it into machine understandable language.
    V8 - chrome
    spider monkey - mozilla firefox
    chakra - internet explorer
    Js engine( v8) internally has parser, AST, interpreter, Profiler, compiler.


Q.3 What are the differences between var, let and const?
Ans: These are three different ways of creating or declaring the variables in JS.
Out of thses threee var used to be a part of ES5 or EcmaScript2014 and let and const are part of latest release of JS version i.e. ES6.
var is a global scope variableslet and const are local scope(fucntioncal and block) variable.
At the time of memory allocation they will get  their memory  also at different location means var will be in global and let and const will be in script scope according to browser resulting  n that if you will try to access var keyword vairbale before intialization you will get undefined.
But if you will try to access variable created with let or const it will give Reference error: Variable is not defined.
var: redeclared and reintialize
let: reintialize
const: need to be declared and intialize at the same time.

Q.4 What are arrow functions?
Ans: It is newer syntax to write function in javascript introduced in ES6.
It's syntax is let myFunction = (a, b) => a * b;
Using this we can write function like variable in single line.
It gets shorter, If the function has only one parameter, and the statement returns a value, you can remove the brackets and the return keyword.
It is easier to use as callback function in another function as syntax is shorter.
It is useful as using callback functions in like in array methods: map()


Q.5 What is execution context
Ans: It is an concept in javascript that holds information about the environment where the current js code is being exceuted.
Every Execution Context has two phases:
1) Memory allocation Phase => In this phase variables and function definitions gets allocated in the memory. Also variables declared gets intialized with undefined.
2) Code Execution Phase => Here, variables gets the value assigned to them and for every function call a new execution context i.e. FEC is created with same 2 phases.
In js we can have 2 types of execution context:
1) Global (GEC) => When the js file first loads on the browser this context is created and pushed into the call stack. Code which is not in any function or object is excuted inside.
2) Functional (FEC) =>  When Js Engine finds a function call it creates a new execution context refering that function which is also pushed in call stack. FEC can have access to all code of GEC but not vice versa.

Q.6  Hositing and Temperal Dead Zone?
Ans: hoisting refers to process where the it APPEARS to move the function declarations and variables to top of their scope, prior to execution of the code.
Only normal functions are hoisted not arrow or first class or anonymous functions.
If we try to access var variable before intialization it gets hoisted and shows undefined.
But in case of let and const it shows reference error because we are accessing them in Temperal dead zone, which is context of code where variable is present in scope but are not accessible. so it is good practice to always define variables at top of their scope.
console.log(test) // undefined
var test
It is the term to describe the state where the vairables are unreachable. They are in scope, but they aren't declared.
For let and const vairables exist in TDZ from start of their scope until they are declared.
let and const are in the different scope (script scope) and not in global scope so TDZ exists for them and not for var.
To avoid this issue it is suggested that always declare vairable at top of their scope.

Q.7 What are Closures?
Ans: Closure is a combination bundled together with reference to its lexical environment.
Closure gives you access to an outer function's scope from the inner function.
Closures are created everytime a function is created atfunction creation time.

function outer() {
    let num = 5;
   function inner() {
        console.log(num)
    }
    return inner;
}
outer()();

Q.8 Operators : ternary, rest, spread, comparison, logical, increment & decrement
Ans: * The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is true followed by a colon (:), and finally the expression to execute if the condition is false.
This operator is frequently used as an alternative to an if...else statement.
    condition ? exprIfTrue : exprIfFalse
E.g.var age = 26;
var Eligibility = (age >= 21) ? "Eligible" : "Not Eligible";
console.log(Eligibility);

* The rest parameter syntax allows a function to accept an indefinite number of arguments as an array, in JavaScript.
We used when we are not sure how many arguments is to be passed in function.
e.g function myFun(a,  b, ...manyMoreArgs) {
  console.log("a", a)
  console.log("b", b)
  console.log("manyMoreArgs", manyMoreArgs)
}
myFun("one", "two", "three", "four", "five", "six")

* Spread Operator in javascript take in the iterable and expands it into individual values.(destructuring).
It's syntax is ...
It can be used to clone, expand and concat arrays and objects.
let arr = [1, 2, 4]
let arr2 = [...arr, 5, 6]

* Comparison operators compare two values and give back a boolean value: either true or false.
 Comparison operators are used in decision making and loops.
 ==, ===, !=, !==, >, <, >=, <=

* Logical operators perform logical operations: AND, OR and NOT.
&& => true if both the operands/boolean values are true, else evaluates to false
|| => true if either of the operands/boolean values is true. evaluates to false if both are false
! => true if the operand is false and vice-versa.

* The increment operator (++) increments (adds one to) its operand and returns a value.
    Post increment (x++) =>  increments and returns the value before incrementing.
    Pre increment (++x) =>  increments and returns the value after incrementing.

* The decrement operator (--) decrements (subtracts one to) its operand and returns a value.
    Post decrement (x--) =>  decrements and returns the value before decrementing.
    Pre decrement (--x) =>  decrements and returns the value after decrementing.


Q.9 Decision makinig : if-else, if-else ladder , switch
Ans: Decision making is when wwant to execute particular logic only if the condition gets satifies.
if-else:
    if (condition) {
        // block of code if condition is true
    } else {
    // block of code if condition is false
    }

if...else if...else:
    if (condition1) {
        // code block 1
    } else if (condition2){
        // code block 2
    } else {
        // code block 3
    }

Switch: The switch statement evaluates an expression, matching the expression's value to a case, and executes statements associated with that case.
let day = 3;
let dayName;

switch (day) {
  case 1:
    dayName = 'Sunday';
    break;
  case 2:
    dayName = 'Monday';
    break;
  case 3:
    dayName = 'Tuesday';
    break;
  case 4:
    dayName = 'Wednesday';
    break;
  case 5:
    dayName = 'Thursday';
    break;
  case 6:
    dayName = 'Friday';
    break;
  case 7:
    dayName = 'Saturday';
    break;
  default:
    dayName = 'Invalid day';
}

console.log(dayName); // Tuesday



7 - What is typeOf operator?
=> The typeof operator is a operator that is placed before its single operand, which can be of any type.
    Its value is a string indicating the data type of the operand.
    The typeof operator evaluates to "number", "string" or "boolean" if its operand is a number, string, or boolean value
    and returns true or false based on the evaluation.
    Number
    String
    Boolean
    object
    Function
    Undefined
    Null


8 - What is the difference between Double equals and triple equals
=> These are the comparison operators. They always return boolean values like true or false.
== it compares only the value.
=== it compares both the value as well as type of data.
If you want to find the data type of value we use typeof operator.
let a = 5
let b = "5"
a == b will give true
a === b will give false


9 - What is the difference between undefined and null?
=> undefined => It is and identifier in JS. When we declare a variable and do not assign any value to it, it by default gets the value assigned known as undefined in javascript.
typeof (undefined) gives us undefined.
Null => It is reserved keyword in JS that can be assigned to variable which represents no value.
typeof (null) is an object.


10 - What is Nan?
Ans: NaN => It is known as Not a Number. It denotes that value of object is not a number.
Any operation with numbers which is problematic or not possible we get NaN
e.g. console.log(Math.sqrt(-2))
console.log(3 + undefined)
console.log(0/0)
and any arthimetic operation wih undefined will result in NaN

11 - What is Functions ?
=> A JavaScript function is a block of code designed to perform a particular task.
A JavaScript function is executed when "something" invokes it (calls it).
Function is object in js beacuse of Prototype chaining. Function constructor.

12 - What is Anonymous Functions ?
=> Anonymous Function is a function that does not have any name associated with it.
We need vairable to access the the function and execute it.
function () {
  console.log("Hello i am anonymous")
}

13 - What is IIFE ?
=> IIFE (immediately inovoked Fucntion expression) is which is invoked as soon as the function is defined.
We cannot call them whenever we want.
(function () {
  code
})()


14 - What is High Order Functions  ?
=> Functions which accepts another function as an argument or returns a function is higher order function.
map, filter etc
function a (b){
    return function (){
        console.log("hey");
    }
}
const b = () => {
    console.log("hello");
}
a(b)


15 - What is Arrow Functions ?
=> It is newer syntax to write function in javascript introduced in ES6.
It's syntax is let myFunction = (a, b) => a * b;
It gets shorter! If the function has only one statement, and the statement returns a value, you can remove the brackets and the return keyword.
It is easier to use as callback function in another function as syntax is shorter.


16 - What is First Class Functions ?
When functions are treated like any other variable in js they are called as first class functions.
This function can be passed as an argument to other function also they can be returned by other functions.
const greeting = function () {
    console.log("Hello World");
}
greeting();



17 - What is Function Expresssions ?
=> It is a way by which we can define a function stored in a variable and can be accessed using variableName.
function expression do not get hoisted because they are no more function but behave as variable and variables do not get memory at the time of memory allocation.
Function Expression  allows us to create an anonymous function which doesn’t have any function name which is the main difference between Function Expression and Function Declaration.
It allows us to pass the function as an argument as anonymous or arrow functions in JS.
 A function expression can be used as an IIFE.
  With the ES6 features introducing Arrow Function, it becomes more easier to declare function expression.
const myFunc = function() {
  console.log("HI")
}



18 - What is Pure Functions ?
=>  It is a function that always returns the same output for the same arguments passed in it.
it will not modify the input data and return us new data.
That means function's return statement does not depend on the values outside the function.
function add(a, b) {
    return a + b;
}


19 - What is Callback Functions ?
=> A callback is a function passed as an argument to another function.
This technique allows a function to call another function.
A callback function can run after another function has finished.
e.g. map, filter, reduce.
function hOFunc (cb) {
    cb('Hello World')
}

hOFunc((msg) => {
    console.log(msg)
})

20 - What is the generator function  ?
=> A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return.
It is used to generate new values according to we need it.
The yield keyword allows us return a value back to us and suspends the function execution.
But we are able to resume the function execution immediately after the last yield run.

It is a function that generates the value or create the value when required and it will allocate the memory to that value only at the
time when its function is being executed.
syntax: function*
it contains something known as yield, keyword bascially tells that at each and every time fo exceution what value has to be generated

This generator function returns a next function, then while executing next function it will return an object which will contain two values: value and done.
value is the actual required returned value.
done will have only boolean value which signify if there is any more generation left with generator function or not if false then
fucntion can generate more values if true then no new value can be generated then  value key will also be
undefined


unless next() function is not invoked generator function is not executed.
function* fun() {
    yield 1;
    yield 2;
    yield 3;
}

It returns us a generator object which can be used by calling the next method on generator object.
This object has 2 properties value (returning from yield) and done (true or false) true when function has returned all yield and value is undefined.


var gen =fun();
console.log(gen.next().value) // 1
console.log(gen.next().value) // 2
console.log(gen.next().value) // 3


21 - What are operators  ?
=> In JavaScript, an operator is a special symbol used to perform operations on values and variables.
They are categorized as:
--> Assignment operators are used to assign values to variables.
--> Arithmetic operators are used to perform arithmetic calculations.(+, -, /, *, %, **, ++, --)
--> Comparison operators compare two values and return a boolean value, either true or false (==, ===, !=, >=, <=, >, <)
--> Logical operators perform logical operations on expression and return a boolean value, either true or false (&&, ||, !)
--> The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question
    mark (?), then an expression to execute if the condition is true followed by a colon (:), and finally the expression to execute if the condition is false.
    This operator is frequently used as an alternative to an if...else statement.
      condition ? exprIfTrue : exprIfFalse
      E.g.var age = 26;
      var Eligibility = (age >= 21) ? "Eligible" : "Not Eligible";
      console.log(Eligibility);


22 - What is closure in javascript ?
=> Closure is a combination bundled together with reference to its lexical environment.
Closure gives you access to an outer function's scope from the inner function.
Closures are created everytime a function is created at fucntion creation time.

closure is combination of function and its lexical environment
let a = 20;
function add() {
    console.log(a);
}
add();

function outer() {
    var num = 5;
    fucntion inner() {
        console.log(num)
    }
    return inner;
}
outer()();


23 - what is function currying. With example.
=> If a function is returning another fucntion then to execute that we need to create a new variable and invoke that variable which would be expensive from the
memory perspective.
function currying lets you execute the returned function with the main funtion name only and you wont have to create a new variable for that.
function add (a) {
	return function (b){
		return function (c){
			console.log(a+b+c)
		}
	}
}

let b = a()
b()
let c = b()
c()

a()()()



24 - Write a function to delete a character from any string ?
=>  let str = "Hello World";
    function delChar (myStr, ch) {
        return myStr.split("").filter((i) => i !== ch).join("");
    }
    delChar(str, 'l');


25 - Define Weakset weakmap
=> Weakset --> WeakSet in JavaScript is used to store a collection of objects. It adapts the same properties of that of a set i.e. does
               not store duplicates.
               The major difference of a WeakSet with the set is that a WeakSet is a collection of objects and not values of some particular type.
          var weakSetObject = new WeakSet();
          var objectOne = {};
          var objectTwo = {};
          weakSetObject.length();
          weakSetObject.add(objectOne);
          weakSetObject.add(objectTwo);
          weakSetObject.delete(objectTwo);
          weakSetObject.has(objectTwo);

          A set is a collection of items which are unique i.e no element can be repeated.
          var set1 = new Set(["sumit","sumit","amit","anil","anish"]);

    WeakMap --> WeakMap is a new Collection introduced in ES6.
                WeakMaps allows you to store a collection of Key-Value pairs.
                It adopts the same properties of Map.
                The Major difference is that keys of WeakMap cannot be a primitive data type.
                The keys must be of type object and values can be of any data type.
          const m = new WeakMap();
          obj1 = {}
          m.set(obj1, "Object 1");
          obj2 = {}
          m.set(obj2, "Object 2");
          m.delete(obj2);
          console.log(m.get(obj1));
          console.log(m.has(obj1));


          let john = { name: "John" };
          let weakMap = new WeakMap();
          weakMap.set(john, "...");
          john = null; // john is removed from the memory.
          // if john dies, secret documents will be destroyed automatically

          In ES5, objects can have the keys only as string datatypes, Now if you want to create the keys as object so it is not possible
          In ES6 , we got new data type as Map which was allowing us to create a data type in which key and value both can be objects.
            const data = new Map()
            data.set({id:1},{name:"Hars"})

          Map is a collection of elements where each element is stored as a Key, value pair.
          Map object can hold both objects and primitive values as either key or value.
          let john = { name: "John" };
          let map = new Map();
          map.set(john, "...");
          john = null; // john is still stored inside map


          Garbage Collection: When any data or objects or any sort of values which are not being used or will not be used in future as well that time we need someone who can remove these values from memory or collect this garbage. This is known as garbage collection.


          Map v/s WaekMap : map is iterable wheareas WeakMap are not.


26 - What is the difference bw Map and far each
=> Both map and forEach are array methods which take in callback function as an argument and perform a particular logic on each element of the array.
But map returns us a new array while forEach does not return us anything.
let arr = [1, 2, 3, 4]
let newArr = arr.map(item => item * 2)

let newArr = []
arr.forEach(item => newArr.push(item * 2))
console.log(newArr);



27 - What is the difference between filter and find
=>  The arr.find() method in Javascript is used to get the value of the first element in the array that satisfies the provided condition.
It does not change the original array.
It takes callback function as argument.
let arr = [1, 2, 3, 4]
var found = arr.find(item => item % 2 == 0)
console.log(found)

The arr.filter() method is used to create a new array from a given array consisting of only those elements from the given array which satisfy a condition set by the argument method.
let arr = [1, 2, 3, 4]
var filtered = arr.filter(item => item % 2 == 0)
console.log(filtered)



28 - Explain for Each loop
=> Loops are used to repeat a block of code.
usually used when we want to iterate over array.


*   for (initialExpression; condition; updateExpression) {
        // for loop body
    }

*   The for...in statements iterates (loops) over the properties of an object.
    for (let x in object) {
    code block to be executed
    }

*   The for...of statements iterates (loops) over the elements of array without using index.
        for(let ele of array) {
            code block to be executed
        }

*  The while statement creates a loop that executes a specified statement as long as the test    condition evaluates to true.
    The condition is evaluated before executing the statement.
    let n = 0;
    while (n < 3) {
    n++;
    }
    console.log(n);

* The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false.
  The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.
    let result = '';
    let i = 0;

    let n = 3;
    do{
        n++
    } while(n < 3)
    console.log(n);



29 - What is Prototype  and Prototype Chaining ?
=> The Prototype property in JavaScript is an object from which another objects inherit properties from.
Whenever we will create a function, array or object it will also have prototype object attached with it which will have
all the properties like for array it will have array methods like filter, map, etc. Prototype represents Parent constructor fucntion.
Prototypes are means of inheritance in Js. So the prototype of an object would also have a prototype object.
This continues until we  when there is no prototype object which is Object master constructor function which has
__proto__ property as null.
This is called prototype chaining in JS.
function Student(name,age){
    this.name = name;
    this.age = age;
}
const student = new Student('John',32)
console.log(student)


let arr = [1, 2,3, 4]
console.log(arr)

let obj = {name: "tanmay", age: 22}
console.log(obj)

function Person() {
    console.log("hello")
}
console.log(Person.prototype)


Q.30 -  Spread and rest parameters opearators

let a = [1,2,3];
let b = [4,5,6];
let c = combination of a and b = [...a, ...b]

spread =>  helps you to destructure the non-primitive datatypes(arr and obj)

REST
function add(a, b, ...c) {
    console.log(a, b, c)
}

add(1,2,3,4,5,6) a=1, b=2, c=[3,4,5,6]


Q. 31 - What is Call apply bind method?
=> These are the methods in js serving the same purpose with some differences. The purpose they serve is take in object and sets the this keyword in a function to the specified object.
this refers to the object from where the function is invoked from.
bind() => it creates and returns a new function
call() and apply() => it set this keyword and immediately executes the function doesnt return anything.
only difference between call() and apply() is call accepts comma seperated arguments and apply accepts array of arguments
const john = {
    name: 'John',
    age: 22
}
const jane = {
    name: 'Jane',
    age: 26
}
function greeting () {
    consoel.log(`Hi my name is ${this.name} and I am ${this.age} years old.`)
}
greeting.call(john) // Hi my name is John and I am 22 years old.
let newFunc = greeting.bind(jane)
newFunc(); // Hi my name is Jane and I am 26 years old.


Q. 32 - Real DOM VS Virtual DOM
=> Document Object Model (DOM) is a programming interface for HTML Documents.
    It is like a lightweight copy of original DOM which is stored in React's Virtual Memory.
    With DOM, we can easily access and manipulate tags, IDs, classes, attributes, or elements using methods like getElementById etc.
    It is itnroduced in react to make the performance of the application better and faster.
Every time there is a change, it doesn't directly gets updated in Original DOM it gets updated in Virtual DOM.
Virtual DOM computes the best possible way to minimize operations on the original DOM by sending changes in batches instead of every single change.


Q. 33 - Implement code to check a number is palindrome or not ?
=>  function PalinCheck (num) {
    let temp = num;
    let rev = 0;
    while(num > 0) {
        rem = num % 10;
        num = parseInt(num / 10)
        rev = rev*10 + rem
    }
    if(temp == rev) {
        console.log("Number is palindrome")
    } else {
        console.log("Number is not palindrome")
    }
}



Q.34 - Difference between Splice and slice?
=>  The methods slice() and splice() are methods for array.

slice() --> This method is used to get a new array by selecting a sub-array of a given array.
array_name.slice(s, e) including start index and excluding end index.
original array does not get changed.
It works on strings.
let arr = [1, 2, 3, 4, 5]
let newArr = arr.slice(2, 4)
console.log(newArr) // [3, 4]

splice() --> This method is used to add/remove an item from the given array.
array_name.splice(i, n, item 1, item 2) i is start index, n is no. of items to remove and item1, item2 are items to add.
it does not work on strings.
original array gets changed.

let arr = [1, 2, 3, 4, 5]
arr.splice(2, 0, 'hello', 'world')
console.log(arr) // [ 1, 2, 'hello', 'world', 3, 4, 5 ]

Q.35 Difference between Document and Window Object?
=>  Document --> It represents any HTML document or web page that is loaded in the browser.
                It is loaded inside the window.
                It is the object of window property.
                All the tags, elements with attributes in HTML are part of the document.
                We can access the document from a window using the window. document
                Properties of document objects such as title, body, cookies, etc can also be accessed by a window like this window. document.title

    Window --> It represents a browser window or frame that displays the contents of the webpage.
            It is the very first object that is loaded in the browser.
            It is the object of the browser.
            Global objects, functions, and variables of JavaScript are members of the window object.
            We can access the window from the window only. i.e. window.window
            Properties of the window object cannot be accessed by the document object.


Q.36 What are callbacks and why do we use it
=> Callbacks make sure that a function is not going to run before a task is completed but will run right after the task has completed.
We can create callback function using arrow fucntions or anonymous functions. and they are passed into another function.
const message = function() {
    console.log("Hello i am callback");
}

function highOrder(cb) {
    console.log("Execute me first then cb");
    cb();
}
highOrder(message)


Q.37 What are the different types of errors in javascript
=> An error is an action which is inaccurate or incorrect.
There are three general types of errors that can occur when playing a JavaScript program. These errors are:
ReferenceError
TypeError
SyntaxError

Reference Error: This error is thrown when a reference made to a variable/item is broken. That is the variable/item doesn’t exist.
Type error: TypeError occurs when an operation is performed on a wrong data type. Maybe a boolean is expected but a sting is found.
using array methods on variable.
Syntax Error: Human made error. This is the most common error we encounter. This error occurs when we type code that the JS engine can understand.

Load-time errors
Runtime errors

Syntax error (Load Time Error): is an error in the syntax of a sequence of characters that is intended to be written in a particular programming language it is also the load-time error if the syntax is not correct then it will give an error message. when cript gets load for the first time. Human made errors.

Runtime errors: A runtime error is an error that occurs during the running of the program, also known as the exceptions. Like accessing a variable or executing a function which does not exist. when script is running

Q.38 Can you explain why we use async-await
=> async and await makes promises easier to write. await makes a function wait
for a promise and used before a function having a promise and used in a function which is defined asynchronously using async keyword.
We need async-await because:
function add (a, b) {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve(a + b), 2000)
    })
}

add(1, 5).then(sum => console.log(sum)) // logs after 2 seconds 6

function increaseSalary(base, increase) {
    const newSalary = add(base, increase);
    console.log(`NewSalary ${newSalary}`)
    return newSalary;
}
Unfortunately, the function increaseSalary() doesn't know how to handle promises. The function considers promises regular objects: it doesn't know how and when to extract values from promises.

async function increaseSalary(base, increase) {
    const newSalary = await add(base, increase);
    console.log(`NewSalary ${newSalary}`)
    return newSalary;
}


Q.39 What are Promises and why do we need them?
=>  Promise is an object in javascript that represents eventual completion or failure of an asynchronous operation and its resulting value.
Promises are used to handle asynchronous operations in JavaScript. They are easy to manage when dealing with multiple asynchronous operations where callbacks can create callback hell leading to unmanageable code.
Promise can be created using Promise constructor. which takes in a callback function and which has 2 parameters resolve and reject.
Promise makes js synchronous again when we have asynchronous in js
let promise1 = new Promise((resolve, reject) => {
    const x = 5;
    const y = 5;
    if (x === y ) {
        resolve("Both are equal")
    } else {
        reject("Not equal")
    }
    resolve('Promise has been fulfilled')
    reject('Promise has been rejected')
})
Promise can be in one of the 3 state at an instance of time:
1) pending: initial state, promise neither been resolved nor rejected
2) fulfilled: it means operation has been completed successfully (resolved)
3) rejected: it means operation has been failed to complete.
There are also promise consumers:
then() =>  it is invoked when promise gets fulfilled. It takes in a callback function and the parameter of the callback function will be equal to the resolve value.
.catch() => it is invoked when promise gets rejected. It takes in a callback function and the parameter of the callback function will be equal to the reject value.
promise1
    .then(result =>  console.log(result))
    .catch(result =>  console.log(result))


Q.40 Difference between ES5 and ES6
=> ES5 --> 	ECMA script is a scripting language defined by Ecma international. The fifth edition of the  same is known as ES5.
            It was introduced in 2009.
            It supports primitive data types that are string, number, boolean, null, and undefined.
            There are only one way to define the variables by using the var keyword.
            It has a lower performance as compared to ES6.
            In ES5, both function and return keywords are used to define a function.

    ES6 --> ECMA script is a scripting language defined by Ecma international. The sixth edition of the same is known as ES6
            It was introduced in 2015.
            In ES6, there are some additions to JavaScript data types. It introduced a new primitive data type ‘symbol’ for supporting unique values.
            There are two new ways to define variables that are let and const.
            It has a higher performance than ES5.
            An arrow function is a new feature introduced in ES6 by which we don’t require the function keyword to define the function.


Q.41 Explain the set time out function and write its syntax
=>   It is an asynchronous function, it will not pause execution of other functions in call stack (As in js code is exceuted line by line and next line to execute previous one should be finished). It is Part of Web api.
It take a callback function to execute and time in ms as arguments and it exceutes that callback function after specified time in milliseconds .
It can be used in alarms or reminders, delay some kind of executions.
console.log("i am first")
setTimeout(() => {
    "I am Last"
}, 3000);
console.log("I am Second");

setTimeout() executes only once after specified but setInterval() is executed after every interval of specified time.


Q.42 Explain promise and call back hell
=>  It is an issue caused by coding with complex nested callbacks.
Each and every callback takes an argument that is result of previous callbacks.
If there is an error in one function, all other functions get affected.
The code structure looks like a pyramid, making it difficult to read and maintain.

E.g. function printLetter(letter, cb) {
    setTimeout(() => {
        console.log(letter);
        cb();
    }, 1000)
}

function print() {
    printLetter("A", () => {
        printLetter("B", () => {
            printLetter("C", () => {
                printLetter("D", () => {
                    console.log("Done")
                })
            })
        })
    })
}

Promise chaining is useful when we need to execute two or more asynchronous operations back to back where each subsequent operation starts when the previous operation succeeds with result from previous step.
It is concept by which we may intialize another promise inside our .then()  method and accordingly we may execute our results.
E.g.
function callPromise(letter) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            console.log(letter)
            resolve()
        }, 1000)
    })
}

callPromise("A")
    .then(() => callPromise("B"))
    .then(() => callPromise("C"))
    .then(() => callPromise("D"))


Q.43 Event loop
=> Event Loop => Whenever a asynchronous operation or function is being it doesnt directly go into the callstack there is queue called as callbakc queue which is where it goes. this queue follows principle of FIFO(first in first out). And event loop frequently checks whether the call stack is empty or not, Whenever it founds it is empty is pushes the first call of callback queue to call stack.




What are callbacks and why do we use it
What are the different types of errors in javascript
"Load time error
Run time error "
Can you explain why we use async-await
What are Promises and why do we need them?
Difference between ES5 and ES6
Explain the set time out function and write its syntax
Explain promise and call back hell
Event loop




